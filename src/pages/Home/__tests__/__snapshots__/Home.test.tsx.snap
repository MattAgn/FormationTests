// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`[Page] Home should display error message on failed subscribe 1`] = `
Array [
  <View
    style={
      Array [
        Object {
          "alignItems": "center",
          "flexBasis": 0,
          "flexGrow": 1,
          "flexShrink": 1,
          "paddingHorizontal": 20,
          "paddingTop": 40,
        },
      ]
    }
  >
    <Text
      style={
        Array [
          Object {
            "fontSize": 20,
            "marginVertical": 20,
          },
        ]
      }
    >
      Subscribe to our newsletter
    </Text>
    <View
      style={
        Array [
          Object {
            "flexDirection": "row",
          },
          undefined,
        ]
      }
    >
      <TextInput
        allowFontScaling={true}
        formik={
          Object {
            "dirty": true,
            "errors": Object {},
            "handleBlur": [Function],
            "handleChange": [Function],
            "handleReset": [Function],
            "handleSubmit": [Function],
            "initialValues": Object {
              "email": "",
            },
            "isSubmitting": true,
            "isValid": true,
            "isValidating": false,
            "registerField": [Function],
            "resetForm": [Function],
            "setError": [Function],
            "setErrors": [Function],
            "setFieldError": [Function],
            "setFieldTouched": [Function],
            "setFieldValue": [Function],
            "setFormikState": [Function],
            "setStatus": [Function],
            "setSubmitting": [Function],
            "setTouched": [Function],
            "setValues": [Function],
            "status": undefined,
            "submitCount": 1,
            "submitForm": [Function],
            "touched": Object {
              "email": true,
            },
            "unregisterField": [Function],
            "validate": undefined,
            "validateField": [Function],
            "validateForm": [Function],
            "validateOnBlur": false,
            "validateOnChange": false,
            "validationSchema": undefined,
            "values": Object {
              "email": "hellobam.co",
            },
          }
        }
        name="email"
        onBlur={[Function]}
        onChangeText={[Function]}
        placeholder="Email"
        rejectResponderTermination={true}
        setFieldTouched={[Function]}
        setFieldValue={[Function]}
        style={
          Array [
            Object {
              "flex": 1,
            },
            undefined,
          ]
        }
        touched={true}
        underlineColorAndroid="transparent"
        value="hellobam.co"
      />
    </View>
    <View
      accessible={true}
      clickable={true}
      isTVSelectable={true}
      onClick={[Function]}
      onResponderGrant={[Function]}
      onResponderMove={[Function]}
      onResponderRelease={[Function]}
      onResponderTerminate={[Function]}
      onResponderTerminationRequest={[Function]}
      onStartShouldSetResponder={[Function]}
      style={
        Object {
          "opacity": 1,
          "width": "100%",
        }
      }
    >
      <View
        style={
          Array [
            Object {
              "alignItems": "center",
              "backgroundColor": "green",
              "borderRadius": 6,
              "color": "white",
              "marginVertical": 20,
              "paddingVertical": 10,
            },
          ]
        }
      >
        <Text
          style={
            Array [
              Object {
                "color": "white",
              },
            ]
          }
        >
          Validate
        </Text>
      </View>
    </View>
  </View>,
  <View
    style={
      Object {
        "left": 0,
        "position": "absolute",
        "right": 0,
        "top": 0,
        "transform": Array [
          Object {
            "translateY": -100,
          },
        ],
        "zIndex": 9999,
      }
    }
  >
    <View
      accessible={true}
      clickable={true}
      onClick={[Function]}
      onResponderGrant={[Function]}
      onResponderMove={[Function]}
      onResponderRelease={[Function]}
      onResponderTerminate={[Function]}
      onResponderTerminationRequest={[Function]}
      onStartShouldSetResponder={[Function]}
      style={
        Object {
          "backgroundColor": "rgb(202,15,15)",
          "paddingBottom": 15,
          "paddingLeft": 15,
          "paddingRight": 15,
          "paddingTop": 25,
        }
      }
    >
      <Text
        style={
          Object {
            "color": "#fff",
            "fontSize": 13,
            "lineHeight": 16,
          }
        }
      >
        Oups something went wrong...
      </Text>
    </View>
  </View>,
]
`;

exports[`[Page] Home should display succesful message on successful subscribe 1`] = `
Array [
  <View
    style={
      Array [
        Object {
          "alignItems": "center",
          "flexBasis": 0,
          "flexGrow": 1,
          "flexShrink": 1,
          "paddingHorizontal": 20,
          "paddingTop": 40,
        },
      ]
    }
  >
    <Text
      style={
        Array [
          Object {
            "fontSize": 20,
            "marginVertical": 20,
          },
        ]
      }
    >
      Subscribe to our newsletter
    </Text>
    <View
      style={
        Array [
          Object {
            "flexDirection": "row",
          },
          undefined,
        ]
      }
    >
      <TextInput
        allowFontScaling={true}
        formik={
          Object {
            "dirty": true,
            "errors": Object {},
            "handleBlur": [Function],
            "handleChange": [Function],
            "handleReset": [Function],
            "handleSubmit": [Function],
            "initialValues": Object {
              "email": "",
            },
            "isSubmitting": true,
            "isValid": true,
            "isValidating": false,
            "registerField": [Function],
            "resetForm": [Function],
            "setError": [Function],
            "setErrors": [Function],
            "setFieldError": [Function],
            "setFieldTouched": [Function],
            "setFieldValue": [Function],
            "setFormikState": [Function],
            "setStatus": [Function],
            "setSubmitting": [Function],
            "setTouched": [Function],
            "setValues": [Function],
            "status": undefined,
            "submitCount": 1,
            "submitForm": [Function],
            "touched": Object {
              "email": true,
            },
            "unregisterField": [Function],
            "validate": undefined,
            "validateField": [Function],
            "validateForm": [Function],
            "validateOnBlur": false,
            "validateOnChange": false,
            "validationSchema": undefined,
            "values": Object {
              "email": "hello@bam.co",
            },
          }
        }
        name="email"
        onBlur={[Function]}
        onChangeText={[Function]}
        placeholder="Email"
        rejectResponderTermination={true}
        setFieldTouched={[Function]}
        setFieldValue={[Function]}
        style={
          Array [
            Object {
              "flex": 1,
            },
            undefined,
          ]
        }
        touched={true}
        underlineColorAndroid="transparent"
        value="hello@bam.co"
      />
    </View>
    <View
      accessible={true}
      clickable={true}
      isTVSelectable={true}
      onClick={[Function]}
      onResponderGrant={[Function]}
      onResponderMove={[Function]}
      onResponderRelease={[Function]}
      onResponderTerminate={[Function]}
      onResponderTerminationRequest={[Function]}
      onStartShouldSetResponder={[Function]}
      style={
        Object {
          "opacity": 1,
          "width": "100%",
        }
      }
    >
      <View
        style={
          Array [
            Object {
              "alignItems": "center",
              "backgroundColor": "green",
              "borderRadius": 6,
              "color": "white",
              "marginVertical": 20,
              "paddingVertical": 10,
            },
          ]
        }
      >
        <Text
          style={
            Array [
              Object {
                "color": "white",
              },
            ]
          }
        >
          Validate
        </Text>
      </View>
    </View>
  </View>,
  <View
    style={
      Object {
        "left": 0,
        "position": "absolute",
        "right": 0,
        "top": 0,
        "transform": Array [
          Object {
            "translateY": -100,
          },
        ],
        "zIndex": 9999,
      }
    }
  >
    <View
      accessible={true}
      clickable={true}
      onClick={[Function]}
      onResponderGrant={[Function]}
      onResponderMove={[Function]}
      onResponderRelease={[Function]}
      onResponderTerminate={[Function]}
      onResponderTerminationRequest={[Function]}
      onStartShouldSetResponder={[Function]}
      style={
        Object {
          "backgroundColor": "rgb(202,15,15)",
          "paddingBottom": 15,
          "paddingLeft": 15,
          "paddingRight": 15,
          "paddingTop": 25,
        }
      }
    >
      <Text
        style={
          Object {
            "color": "#fff",
            "fontSize": 13,
            "lineHeight": 16,
          }
        }
      >
        Oups something went wrong...
      </Text>
    </View>
  </View>,
]
`;
